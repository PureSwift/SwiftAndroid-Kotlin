
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql' 'Sources' '../java' ///

/// interface com.johnholdsworth.swiftbindings.SwiftMainActivityBinding$Listener ///

public protocol SwiftMainActivityBinding_Listener: JavaProtocol {

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftMainActivityBinding$Listener.viewDidLoad()

    func viewDidLoad()

}


open class SwiftMainActivityBinding_ListenerForward: JNIObjectForward, SwiftMainActivityBinding_Listener {

    private static var SwiftMainActivityBinding_ListenerJNIClass: jclass?

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftMainActivityBinding$Listener.viewDidLoad()

    private static var viewDidLoad_MethodID_2: jmethodID?

    open func viewDidLoad() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "viewDidLoad", methodSig: "()V", methodCache: &SwiftMainActivityBinding_ListenerForward.viewDidLoad_MethodID_2, args: &__args, locals: &__locals )
    }


}

private typealias SwiftMainActivityBinding_Listener_viewDidLoad_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> ()

private func SwiftMainActivityBinding_Listener_viewDidLoad_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> () {
    SwiftMainActivityBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).viewDidLoad( )
}

fileprivate class SwiftMainActivityBinding_ListenerLocal_: JNILocalProxy<SwiftMainActivityBinding_Listener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let SwiftMainActivityBinding_Listener_viewDidLoad_0_thunk: SwiftMainActivityBinding_Listener_viewDidLoad_0_type = SwiftMainActivityBinding_Listener_viewDidLoad_0
        natives.append( JNINativeMethod( name: strdup("__viewDidLoad"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( SwiftMainActivityBinding_Listener_viewDidLoad_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_johnholdsworth/SwiftMainActivityBinding_ListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension SwiftMainActivityBinding_Listener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return SwiftMainActivityBinding_ListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class SwiftMainActivityBinding_ListenerBase: SwiftMainActivityBinding_Listener {

    public init() {}

    /// public abstract void com.johnholdsworth.swiftbindings.SwiftMainActivityBinding$Listener.viewDidLoad()

    open func viewDidLoad() /**/ {
    }


}
